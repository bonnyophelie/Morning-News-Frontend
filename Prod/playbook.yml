- name: Installing Docker
  hosts: all
  become: true
  tasks:
    - name: Check if Docker is installed
      become: true
      ansible.builtin.command: docker -v
      register: docker_installed
      ignore_errors: true

    - name: Install Docker
      become: true
      block:
        - name: Add Docker's official GPG key
          block:
            - name: Update apt
              import_tasks: apt.yml
            - name: Install necessary packages
              become: true
              ansible.builtin.apt:
                name:
                  - ca-certificates
                  - curl
                  - gnupg
                state: present
                update_cache: true

            - name: Add GPG key
              ansible.builtin.shell:
                cmd: |
                  sudo install -m 0755 -d /etc/apt/keyrings
                  curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                  sudo chmod a+r /etc/apt/keyrings/docker.gpg
              args:
                  chdir: /etc/apt/keyrings/
                  creates: docker.gpg

        - name: Add the repository to Apt sources
          block:
            - name: Add repos
              ansible.builtin.shell:
                cmd: |
                  echo \
                  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
                  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
                  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            - name: Update apt
              import_tasks: apt.yml

        - name: Install Docker packages
          become: true
          when: docker_installed.failed
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: latest
            update_cache: true

    - name: Ensure Docker group exists
      become: true
      ansible.builtin.group:
        name: docker
        state: present
      register: docker_group

    - name: Add User to docker group
      become: true
      when: docker_group is changed
      ansible.builtin.user:
        name: yourUser
        groups: docker
        append: true

    - name: Install Nginx
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: Install Python3
      ansible.builtin.apt:
        name: python3
        state: present

    - name: Install certbot
      ansible.builtin.apt:
        name:
          - certbot
          - python3-certbot-nginx

    - name: Register certbot
      ansible.builtin.shell: |
        certbot -n register --agree-tos --email bonny.ophelie@gmail.com
        touch /etc/letsencrypt/.registered
      args:
        creates: /etc/letsencrypt/.registered

    - name: Copy nginx reverse proxy conf file
      ansible.builtin.copy:
        dest: "/etc/nginx/sites-enabled/default"
        src: /home/engineer/Bureau/Batch7/Projet/morningnews-projet/frontend-terraform/Prod/default
        owner: "root"
        mode: '777'
      notify: Reload nginx

    - name: 'Get certificate'
      ansible.builtin.command: 'certbot -n --nginx -d morningnews-prod.batch7.online'
      args:
        creates: '/etc/letsencrypt/live/morningnews-prod.batch7.online'

    - name: Copy docker-compose file
      ansible.builtin.copy:
        src: /home/engineer/Bureau/Batch7/Projet/morningnews-projet/frontend/docker-compose.yml
        dest: /home/admin

    - name: Copy deploy script
      ansible.builtin.copy:
        src: /home/engineer/Bureau/Batch7/Projet/morningnews-projet/frontend/deploy.sh
        dest: /home/admin
        mode: a+x

    - name: Configure sshd
      ansible.builtin.lineinfile:
        path: "/etc/ssh/sshd_config"
        regex: "^(#)?{{ item.key }}"
        line: "{{ item.key }} {{ item.value }}"
        state: present
      loop:
        - { key: "PermitRootLogin", value: "no" }
        - { key: "PasswordAuthentication", value: "no" }
      notify:
        - Restart sshd

    - name: Install UFW firewall
      ansible.builtin.apt:
        name: ufw
        update_cache: true
        state: latest

    - name: Deny everything and enable ufw
      community.general.ufw:
        state: enabled
        policy: deny

    - name: Set logging
      community.general.ufw:
        logging: true

    - name: Allow OpenSSH
      community.general.ufw:
        rule: allow
        name: OpenSSH

    - name: Allow all access to tcp port 80
      community.general.ufw:
        rule: allow
        port: '80'
        proto: tcp

    - name: Allow all access to tcp port 443
      community.general.ufw:
        rule: allow
        port: '443'
        proto: tcp

    - name: Allow all access to tcp port 22
      community.general.ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: Crowdsec Add GPG apt Key
      ansible.builtin.apt_key:
        url: https://packagecloud.io/crowdsec/crowdsec/gpgkey
        state: present

    - name: Crowdsec Add Repository
      ansible.builtin.apt_repository:
        repo: "deb https://packagecloud.io/crowdsec/crowdsec/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} main"
        state: present

    - name: Crowdsec Apt update and install Crowdsec
      ansible.builtin.package:
        update_cache: true
        name: crowdsec
        state: present

    - name: Crowdsec install bouncer
      ansible.builtin.apt:
        name: crowdsec-firewall-bouncer-iptables
        state: latest
      notify: Restart crowdsec

  handlers:
    - name: Reload nginx
      ansible.builtin.service:
        name: nginx
        state: reloaded

    - name: Restart sshd
      ansible.builtin.service:
        name: ssh
        state: restarted

    - name: Restart crowdsec
      ansible.builtin.service:
        name: crowdsec
        state: restarted
