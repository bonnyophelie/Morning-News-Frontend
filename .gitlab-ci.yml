default:
  image: node:16.20.2-buster

stages:
  - build-test
  - test
  - sonarqube-check
  - build-preprod
  - build-prod
  - deploy-preprod
  - deploy-prod

dockerbuild_main-job:
  stage: build-test
  before_script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$GITLAB_PAT"
  script:
    - docker build -t "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}" --no-cache --build-arg url="$NEXT_PUBLIC_BACKEND_URL" .
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
  only:
    - main
  tags: [dockerfile]

cypress_eslint_jest:
  image: cypress/browsers:node16.14.2-slim-chrome100-ff99-edge
  stage: test
  script:
    - npm install
    - npm install eslint jest
    - npm run lint
    - npm run build
    - npm start &
    - npm test
    - npm run jest
  only:
    - main

sonarqube-check:
  stage: sonarqube-check
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - main

dockerbuild_preprod:
  stage: build-preprod
  before_script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$GITLAB_PAT"
  script:
    - docker build -t "${IMAGE_NAME}:pre-prod" --no-cache --build-arg url="$NEXT_PUBLIC_BACKEND_URL_PREPROD" .
    - docker push "${IMAGE_NAME}:pre-prod"
  only:
    - pre-prod
  tags: [dockerfile]

dockerbuild_prod:
  stage: build-prod
  before_script:
    - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_PAT"
  script:
    - docker build -t "${DOCKER_REGISTRY_USER}/${IMAGE_NAME}:prod" --no-cache --build-arg url="$NEXT_PUBLIC_BACKEND_URL_PROD" .
    - docker push "${DOCKER_REGISTRY_USER}/${IMAGE_NAME}:prod"
  only:
    - prod
  tags: [dockerfile]
  
access_ec2_preprod:
  stage: deploy-preprod
  image: alpine

  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

  script:
    - ssh -o StrictHostKeyChecking=no "admin@${IP_ADDRESS_PREPROD}"
    - ./deploy.sh "${CI_REGISTRY}/${IMAGE_NAME}:pre-prod"
  only: 
    - pre-prod

access_ec2_prod:
  stage: deploy-prod
  image: alpine

  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

  script:
    - ssh -o StrictHostKeyChecking=no "admin@${IP_ADDRESS_PROD}"
    - ./deploy.sh "${DOCKER_REGISTRY_USER}/${IMAGE_NAME}:prod"
  only:
    - prod
