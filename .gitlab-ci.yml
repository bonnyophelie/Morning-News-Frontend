# Install Cypress, then run all tests (in parallel)
stages:
  - build
  - test
  - sonarqube-check
  - sonarqube-vulnerability-report

# Install NPM dependencies and Cypress
install:
  image: cypress/browsers:node16.14.2-slim-chrome100-ff99-edge
  stage: build

  script:
    - npm install
    - npm run build
    - npm start &
    - npm test

#api-tests:
#  image: cypress/browsers:node16.14.2-slim-chrome100-ff99-edge
#  stage: test
#  parallel: 5
#  script:
#    - npm start:ci & npx wait-on http://localhost:3000
#   - npx cypress run --record --parallel --browser chrome --group "API" --spec "cypress/tests/api/*"

#ui-chrome:
#  image: cypress/browsers:node16.14.2-slim-chrome100-ff99-edge
#  stage: test
#  parallel: 5
#  script:
#    - npm start:ci & npx wait-on http://localhost:3000
#    - npx cypress run --record --parallel --browser chrome --group "UI - Chrome" --spec "cypress/tests/ui/*"

#ui-chrome-mobile:
#  image: cypress/browsers:node16.14.2-slim-chrome100-ff99-edge
#  stage: test
#  parallel: 5
#  script:
#    - npm start:ci & npx wait-on http://localhost:3000
#    - npx cypress run --record --parallel --browser chrome --group "UI - Chrome - Mobile" --spec "cypress/tests/ui/*" --config "viewportWidth=375,viewportHeight=667"

#ui-firefox:
#  image: cypress/browsers:node16.14.2-slim-chrome100-ff99-edge
#  stage: test
#  parallel: 5
#  script:
#    - npm start:ci & npx wait-on http://localhost:3000
#    - npx cypress run --record --parallel --browser firefox --group "UI - Firefox" --spec "cypress/tests/ui/*"

#ui-firefox-mobile:
#  image: cypress/browsers:node16.14.2-slim-chrome100-ff99-edge
#  stage: test
#  parallel: 5
#  script:
#    - npm start:ci & npx wait-on http://localhost:3000
#    - npx cypress run --record --parallel --browser firefox --group "UI - Firefox - Mobile" --spec "cypress/tests/ui/*" --config "viewportWidth=375,viewportHeight=667"


sonarqube-check:
  stage: sonarqube-check
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=thedockerdwelers_frontend_AY1-P8wAQTcRLgZ1JcLe&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check
